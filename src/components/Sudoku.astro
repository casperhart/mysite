---
import background from "../assets/background.svg";
---

<div id="container">
    <!-- <img id="background" src={background.src} alt="" fetchpriority="high" /> -->
    <main>
        <div class="options-form">
            <div class="options-left">
                <label for="difficulty">Difficulty</label>
                <select id="difficulty">
                    <option value="easy">Easy</option>
                    <option value="medium">Medium</option>
                    <option value="hard">Hard</option>
                    <option value="any">Any</option>
                </select>

                <label for="number">Number:</label>
                <select id="number">
                    {
                        [1, 2, 4, 8, 10, 20, 40, 80, 100, 200, 400].map((num) => (
                            <option value={num}>{num}</option>
                        ))
                    }
                </select>

                <button id="generate" class="action-button">Generate</button>
            </div>
            <div class="options-right">
                <button id="download-pdf" class="action-button">Download PDF</button
                >
            </div>
        </div>
        <div id="sudoku-container"></div>
    </main>
</div>

<script>
    import initSync from "sudoku_wasm";
    let wasm = await initSync();
    import { generate_sudoku } from "sudoku_wasm";
    import * as pdfMake from "pdfmake/build/pdfmake";
    import * as pdfFonts from "pdfmake/build/vfs_fonts";

    (pdfMake as any).addVirtualFileSystem(pdfFonts);

    let generateButton = document.getElementById(
        "generate",
    )! as HTMLButtonElement;
    let downloadPdfButton = document.getElementById(
        "download-pdf",
    )! as HTMLButtonElement;
    let difficulty = document.getElementById(
        "difficulty",
    )! as HTMLSelectElement;
    let number = document.getElementById("number")! as HTMLSelectElement;

    // Store generated sudoku data for PDF generation
    let generatedSudokus: string[] = [];

    generateButton.onclick = () => {
        generatedSudokus = [];
        document.querySelectorAll(".sudoku").forEach((e) => e.remove());
        for (let step = 0; step < parseInt(number.value); step++) {
            generatedSudokus.push(generate_sudoku(difficulty.value));
        }

        // Store the generated sudokus for PDF generation

        let container = document.getElementById("sudoku-container")!;
        generatedSudokus.map((sudokuStr, idx) => {
            const rows = [];
            for (let i = 0; i < 9; i++) {
                rows.push(sudokuStr.slice(i * 9, (i + 1) * 9).split(""));
            }

            let sudoku_div = document.createElement("div");
            sudoku_div.setAttribute("class", "sudoku");

            let table = document.createElement("table");
            table.setAttribute("class", "sudoku");
            sudoku_div.appendChild(table);

            let tbody = document.createElement("tbody");
            table.appendChild(tbody);

            rows.forEach((row) => {
                let tr = document.createElement("tr");
                tr.setAttribute("class", "sudoku");
                row.forEach((value) => {
                    let td = document.createElement("td");
                    td.setAttribute("class", "sudoku");
                    td.innerText = value !== "." ? value : "";
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });

            container.appendChild(sudoku_div);
        });
    };
    generateButton.onclick();

    // Function to generate PDF from sudoku data
    downloadPdfButton.onclick = () => {
        if (generatedSudokus.length === 0) {
            alert("Please generate sudokus first!");
            return;
        }

        const docDefinition = {
            pageSize: "letter",
            pageMargins: [40, 60, 40, 60],
            content: [] as any[],
            styles: {
                header: {
                    fontSize: 22,
                    bold: true,
                    margin: [0, 10, 0, 20],
                },
                sudokuTitle: {
                    fontSize: 16,
                    bold: true,
                    margin: [0, 10, 0, 10],
                },
                footer: {
                    fontSize: 14,
                    margin: [0, 10, 0, 0],
                    color: "#777777",
                },
            },
        };

        // Generate PDF content for each sudoku
        generatedSudokus.forEach((sudokuStr, index) => {
            const rows = [];
            for (let i = 0; i < 9; i++) {
                rows.push(sudokuStr.slice(i * 9, (i + 1) * 9).split(""));
            }

            let tableBody: any[][] = [];

            // Add row headers
            rows.forEach((row, rowIndex) => {
                const tableRow: any[] = [];

                // Add cell values for this row
                row.forEach((cell, colIndex) => {
                    tableRow.push({
                        text: cell !== "." ? cell : " ",
                        alignment: "center",
                        fontSize: 24,
                        margin: [4, 4, 4, 4],
                    });
                });

                tableBody.push(tableRow);
            });

            // Add the sudoku number
            docDefinition.content.push({
                text: `Puzzle #${index + 1}`,
                style: "sudokuTitle",
                alignment: "center",
            });

            // Add the sudoku to the document with a page break after (except for the last one)
            docDefinition.content.push({
                layout: {
                    hLineWidth: function (i: number, node: any) {
                        return i === 0 || i % 3 === 0 ? 3 : 1.5;
                    },
                    vLineWidth: function (i: number, node: any) {
                        return i === 0 || i % 3 === 0 ? 3 : 1.5;
                    },
                    paddingLeft: function () {
                        return 8;
                    },
                    paddingRight: function () {
                        return 8;
                    },
                    paddingTop: function () {
                        return 8;
                    },
                    paddingBottom: function () {
                        return 8;
                    },
                },
                table: {
                    body: tableBody,
                    widths: Array(9).fill("*"),
                },
                width: "80%",
                alignment: "center",
                margin: [0, 15, 0, 30],
            });

            // Add a footer with generation info
            docDefinition.content.push({
                text: `Generated on ${new Date().toLocaleDateString()} - ${difficulty.value}`,
                style: "footer",
                alignment: "center",
            });

            // Add page break for all but the last sudoku
            if (index < generatedSudokus.length - 1) {
                docDefinition.content.push({ text: " ", pageBreak: "after" });
            }
        });

        // Generate the PDF
        pdfMake
            .createPdf(docDefinition)
            .download(
                `sudoku-puzzles-${difficulty.value}-${generatedSudokus.length}.pdf`,
            );
    };
</script>

<style>
    .options-form {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background-color: white;
        padding: 1rem;
        display: flex;
        justify-content: space-between;
        z-index: 100;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    
    .options-left {
        display: flex;
        gap: 1rem;
        align-items: center;
    }
    
    .options-right {
        margin-left: auto;
    }

    .action-button {
        background-color: #3b82f6;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .action-button:hover {
        background-color: #2563eb;
        transform: translateY(-1px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .action-button:active {
        transform: translateY(1px);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    #download-pdf {
        background-color: #10b981;
        display: flex;
        align-items: center;
    }

    #download-pdf:hover {
        background-color: #059669;
    }

    #download-pdf::before {
        content: "â†“";
        margin-right: 0.25rem;
        font-weight: bold;
    }

    /* #background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        filter: blur(5px);
    } */

    #container {
        font-family:
            Inter, Roboto, "Helvetica Neue", "Arial Nova", "Nimbus Sans", Arial,
            sans-serif;
        height: 100%;
    }

    main {
        height: 100%;
        display: flex;
        justify-content: center;
    }

    h1 {
        font-size: 22px;
        margin-top: 0.25em;
    }

    h2 {
        margin: 0 0 1em;
        font-weight: normal;
        color: #111827;
        font-size: 20px;
    }

    p {
        color: #4b5563;
        font-size: 16px;
        line-height: 24px;
        letter-spacing: -0.006em;
        margin: 0;
    }

    .box {
        padding: 16px;
        background: rgba(255, 255, 255, 1);
        border-radius: 16px;
        border: 1px solid white;
    }

    table.sudoku {
        border-collapse: collapse;
        margin: 20px auto;
        font-size: 30px;
        border: 3px solid black;
        font-family: Helvetica, sans-serif;
    }
    td.sudoku {
        width: 60px;
        height: 60px;
        text-align: center;
        border: 1px solid black;
    }
    /* Bold borders for 3x3 subgrids */
    td.sudoku:nth-child(3n) {
        border-right: 3px solid black;
    }
    tr.sudoku:nth-child(3n) td {
        border-bottom: 3px solid black;
    }
    @media print {
        @page {
            size: auto;
            margin-top: 0;
            margin-bottom: 0;
            margin-left: 0mm;
            margin-right: 0mm;
            padding: 0;
        }
        .options-form {
            display: none;
        }

        div.sudoku {
            width: 100%;
            height: 96%;
            break-inside: avoid;
            page-break-inside: avoid;
        }

        table.sudoku {
            font-size: 30px;
            position: relative;
            top: 50%;
            -webkit-transform: translateY(-50%);
            -ms-transform: translateY(-50%);
            transform: translateY(-50%);
        }
    }

    @media (max-width: 768px) {
        .options-form {
            flex-direction: column;
            padding: 0.75rem;
        }
        
        .options-left {
            flex-direction: column;
            align-items: flex-start;
            width: 100%;
        }
        
        .options-right {
            margin-left: 0;
            width: 100%;
            margin-top: 0.5rem;
        }

        .options-form select,
        .options-form button {
            width: 100%;
            margin: 0.25rem 0;
        }

        table.sudoku {
            font-size: 20px;
        }

        td.sudoku {
            width: 40px;
            height: 40px;
        }
    }
</style>
